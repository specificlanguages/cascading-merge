name: Cascading Merge
description: Creates or updates a pull request to merge the current branch into the next one in alphabetic order.

inputs:
  branch_prefix:
    description: >
      Prefix of branches to consider when triggering the workflow or looking for the next branch to cascade to.
    default: 'maintenance/mps'
    required: false

  exclude_branch_prefix:
    description: Prefix of branches to exclude from consideration.
    required: false

  merge_prefix:
    description: >
      Prefix to use for merge branches created by the workflow. `branch_prefix` will be stripped before prepending
      the given prefix.
    default: 'merge/mps'
    required: false

  update_from_base:
    description: >
      Whether to update the merge branch from the base branch, as may be required by branch protection rules.
    default: 'false'
    required: false

runs:
  using: composite
  steps:
    - name: Create PR for new changes in ${{ github.ref_name }}
      shell: bash
      env:
        GH_TOKEN: ${{ github.token }}
        owner_and_repo: ${{ github.repository }}
        branch_prefix: ${{ inputs.branch_prefix }}
        merge_prefix: ${{ inputs.merge_prefix }}
        update_from_base: ${{ inputs.update_from_base }}
      run: |
        jq_expr='.[] | .ref | ltrimstr("refs/heads/") | select(. > "${{ github.ref_name }}")'
        if [[ -n '${{ inputs.exclude_branch_prefix }}' ]]
        then
          jq_expr+=' | select(startswith("${{ inputs.exclude_branch_prefix }}") | not)'
        fi
        jq_expr='['$jq_expr'] | min'

        echo "Calculating PR branches:"

        # Next branch matching refs/heads/${{ inputs.branch_prefix}}, or empty if we're on the last one
        next_maintenance_branch=$(gh api "/repos/$owner_and_repo/git/matching-refs/heads/${{ inputs.branch_prefix }}" \
          --jq "$jq_expr")
        echo "  Next maintenance branch: ${next_maintenance_branch:-(none)}"

        # Substitute the default branch if empty
        default_branch=${{ github.event.repository.default_branch }}
        base_branch=${next_maintenance_branch:-$default_branch}
        echo "  PR base branch: $base_branch"

        # Calculate PR head branch name (the branch to merge) by substituting 'maintenance' with 'merge'
        head_branch=${{ github.ref_name }}
        merge_branch=${head_branch/#$branch_prefix/$merge_prefix}
        echo "  Merge branch (will be used as PR head): $merge_branch"

        echo ""

        echo "Pushing ${{ github.ref_name }} to $merge_branch"

        # Create or update $merge_branch
        if gh api repos/$owner_and_repo/git/ref/heads/$merge_branch --silent
        then
          # Branch exists, merge $head_branch into it:

          # First, try fast-forwarding
          echo "Updating $merge_branch to SHA ${{ github.sha }}"
          gh api repos/$owner_and_repo/git/refs/heads/$merge_branch --silent --method=PATCH -f sha=${{ github.sha }} \
            -F force=false ||

            # If that failed, try merging
            (echo "Update failed, trying to merge $head_branch into $merge_branch" ;
              gh api repos/$owner_and_repo/merges --silent --method=POST -f base=$merge_branch -f head=$head_branch) ||

              # If that failed, report an error
              (echo "Merging $head_branch to existing $merge_branch failed, aborting." ; exit 1)
        else
          # Branch does not exist, create it from $head_branch
          gh api repos/$owner_and_repo/git/refs --silent --method=POST -f ref="refs/heads/$merge_branch" -f sha=${{ github.sha }} ||
            (echo "Could not create merge branch $merge_branch" ; exit 1)
        fi

        # Update $base_branch from $base_branch, if requested
        if [[ "$update_from_base" == true ]]
        then
          # The head and base arguments are intentionally reversed because this is a reverse merge.
          gh api repos/$owner_and_repo/merges --silent --method=POST -f base=$merge_branch -f head=$base_branch ||
            echo "Updating $merge_branch from $base_branch failed, please do it manually."
        fi

        # Create PR if it does not exist yet
        read -r pr_number pr_url < <(gh pr list --repo $owner_and_repo --head $merge_branch --base $base_branch \
          --json number,url --jq 'map(.number, .url) | join(" ")')

        if [[ $pr_number ]]
        then
          echo "Found existing PR #$pr_number for $merge_branch -> $base_branch ($pr_url)"

          echo "Requesting review on PR #$pr_number from ${{ github.actor }}"
          gh api repos/$owner_and_repo/pulls/$pr_number/requested_reviewers \
            --silent --method=POST -f 'reviewers[]=${{ github.actor }}'

          echo "Assigning PR #$pr_number to ${{ github.actor }}"
          gh api repos/$owner_and_repo/issues/$pr_number/assignees \
            --silent --method=POST -f 'assignees[]=${{ github.actor }}'

        else
          echo "Creating a new pull request $merge_branch -> $base_branch"
          gh pr create --repo $owner_and_repo --head $merge_branch --base $base_branch \
            --title "Merge ${{ github.ref_name }} into $base_branch" \
            --body "Merge changes from \`${{ github.ref_name }}\` to \`$base_branch\`." \
            --assignee '${{ github.actor }}' \
            --reviewer '${{ github.actor }}'
        fi
